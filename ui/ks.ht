<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>tirCSS Loading</title>
  <style>
    :root {
      --bg-light: #fff;
      --text-light: #000;
      --bg-dark: #121212;
      --text-dark: #eee;
      --shape-stroke-light: rgba(0, 0, 0, 0.15);
      --shape-stroke-dark: rgba(255, 255, 255, 0.15);
      --link-color-light: #007acc;
      --link-color-dark: #3399ff;
    }

    html {
      pointer-events: auto;
      cursor: wait;
    }

    body {
      margin: 0;
      padding: 5vmin;
      height: 100%;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
      background: var(--bg-light);
      color: var(--text-light);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      box-sizing: border-box;
      pointer-events: none;
      user-select: none;
      transition: background-color 0.3s, color 0.3s;
      position: relative;
      overflow: hidden;
    }

    * {
      user-select: none;
      -webkit-user-select: none;
      -ms-user-select: none;
    }

    @media (prefers-color-scheme: dark) {
      body {
        background: var(--bg-dark);
        color: var(--text-dark);
      }
    }

    canvas#bg-canvas {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      z-index: 0;
      display: block;
      pointer-events: none;
    }

    .title-text {
      font-size: clamp(2rem, 15vw, 20rem);
      font-weight: 700;
      margin: 0;
      white-space: nowrap;
      line-height: 1;
      z-index: 1;
      pointer-events: none;
    }

    .loading-text {
      font-size: clamp(1rem, 3vw, 3rem);
      margin-top: 0.5em;
      font-weight: 600;
      animation: pulse 1.2s infinite ease-in-out;
      z-index: 1;
      pointer-events: none;
      min-width: 14ch;
    }

    @keyframes pulse {
      0%, 100% { opacity: 0.3; }
      50% { opacity: 1; }
    }

    #button-container {
      margin-top: 1.5em;
      z-index: 2;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.6s ease;
      user-select: none;
      display: flex;
      justify-content: center;
      width: 100%;
    }

    #editor-button {
      cursor: pointer;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
      font-size: clamp(2rem, 6vw, 6rem);
      font-weight: 900;
      padding: 0.5em 1.5em;
      border-radius: 16px;
      border: none;
      background-color: var(--link-color-light);
      color: white;
      user-select: none;
      transition: background-color 0.25s ease, box-shadow 0.25s ease;
      box-shadow: 0 8px 16px rgba(0, 122, 204, 0.3);
      text-shadow: 0 0 2px rgba(0, 0, 0, 0.25);
      pointer-events: auto;
      width: max-content;
      min-width: 0;
      /* width is set dynamically by script */
    }

    #editor-button:hover,
    #editor-button:focus {
      background-color: var(--link-color-dark);
      box-shadow: 0 10px 24px rgba(51, 153, 255, 0.6);
      outline: none;
    }

    /* Fade overlay */
    #fade-overlay {
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      background-color: var(--bg-light);
      opacity: 0;
      pointer-events: none;
      transition: opacity 1s ease;
      z-index: 9999;
    }

    @media (prefers-color-scheme: dark) {
      #fade-overlay {
        background-color: var(--bg-dark);
      }
    }
  </style>
</head>
<body>
  <canvas id="bg-canvas" aria-hidden="true"></canvas>
  <h1 class="title-text" id="title-text">tirCSS</h1>
  <div class="loading-text" id="loading" aria-live="polite" aria-atomic="true" aria-relevant="text">Loadingâ€¦</div>

  <div id="button-container" role="region" aria-label="Launch editor">
    <button id="editor-button" type="button">Editor</button>
  </div>

  <div id="fade-overlay"></div>

  <script>
    // Loading text cycling
    const loadingText = document.getElementById("loading");

    const messages = {
      "Loading scripts": [
        "/core/init/main.js",
        "/core/lib/ui.js",
        "/env/bootstrap.min.js",
        "/cfg/hooks/useStyle.js",
        "/api/dom/index.js",
        "/store/events/subscriber.js"
      ],
      "Loading UI": [
        "/ui/loader/splash.xml",
        "/ui/panels/main.menu",
        "/themes/darkmode.json",
        "/fonts/Roboto.woff2",
        "/ui/overlays/popup.js"
      ],
      "Loading images": [
        "/assets/ui/bg-37ae9.png",
        "/assets/icons/logo.svg",
        "/textures/shadowmap_01.webp",
        "/asst/vfx/c13wB.png",
        "/assets/images/icon@2x.png"
      ],
      "JIT compiling": [
        "/jit/css-vm/tokens.bin",
        "/jit/engines/stylecore.llvm",
        "/jit/bindings/index.dsym",
        "/jit/cache/hashmap.dat"
      ],
      "Rendering UI": [
        "/render/domTree.layout",
        "/render/viewport.pass1",
        "/render/pass2.shaders",
        "/render/style-pass.postfx",
        "/render/composition.staging"
      ],
      "Caching data": [
        "/cache/style.tokens",
        "/cache/ui.layout.snapshot",
        "/tmp/sessionStorage.db",
        "/tmp/sessionFonts.woff2",
        "/cache/envdata.tmp"
      ],
      "Preparing RAM": [
        "/mem/alloc/map.json",
        "/mem/reserve/buffer.blob",
        "/kernel/vm/prep.meminit",
        "/vmboot/init.tirCSS"
      ]
    };

    // Flatten queue
    const flatQueue = [];
    for (const [label, paths] of Object.entries(messages)) {
      for (const path of paths) {
        flatQueue.push(`${label}: ${path}`);
      }
    }

    const totalTime = 1000; // 1 second total
    const totalItems = flatQueue.length;
    const interval = totalTime / totalItems;

    let index = 0;

    function step() {
      if (index < flatQueue.length) {
        loadingText.textContent = flatQueue[index];
        index++;
        setTimeout(step, interval);
      } else {
        showEditorButton();
      }
    }

    function showEditorButton() {
      loadingText.textContent = "";
      const btnContainer = document.getElementById("button-container");
      btnContainer.style.opacity = "1";
      btnContainer.style.pointerEvents = "auto";
      document.body.style.cursor = "default";
      document.documentElement.style.cursor = "default";

      // Set button width to match "tirCSS" text width
      const title = document.getElementById("title-text");
      const button = document.getElementById("editor-button");
      const titleWidth = title.getBoundingClientRect().width;
      button.style.width = titleWidth + "px";
    }

    step();

    // Editor button logic
    const editorButton = document.getElementById("editor-button");
    const fadeOverlay = document.getElementById("fade-overlay");

    editorButton.addEventListener("click", () => {
      fadeOverlay.style.pointerEvents = "auto";
      fadeOverlay.style.opacity = "1";

      // Choose fade color based on system theme
      const darkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
      fadeOverlay.style.backgroundColor = darkMode ? "#121212" : "#fff";

      setTimeout(() => {
        console.log("editor");
        // Replace this with your editor launch code
      }, 1000);
    });
  </script>

  <script>
    // Shapes background code
    (() => {
      const canvas = document.getElementById('bg-canvas');
      const ctx = canvas.getContext('2d');
      let width, height, dpi;
      let shapes = [];
      const shapeCount = 25;
      const SHAPE_TYPES = ['circle', 'triangle', 'square'];

      function getStrokeColor() {
        return window.matchMedia('(prefers-color-scheme: dark)').matches
          ? getComputedStyle(document.documentElement).getPropertyValue('--shape-stroke-dark').trim()
          : getComputedStyle(document.documentElement).getPropertyValue('--shape-stroke-light').trim();
      }

      class Vector {
        constructor(x, y) { this.x = x; this.y = y; }
        add(v) { this.x += v.x; this.y += v.y; return this; }
        sub(v) { this.x -= v.x; this.y -= v.y; return this; }
        mul(s) { this.x *= s; this.y *= s; return this; }
        div(s) { this.x /= s; this.y /= s; return this; }
        length() { return Math.sqrt(this.x * this.x + this.y * this.y); }
        normalize() { const len = this.length(); if (len > 0) this.div(len); return this; }
        clone() { return new Vector(this.x, this.y); }
        dot(v) { return this.x * v.x + this.y * v.y; }
      }

      class Shape {
        constructor(type, x, y, radius) {
          this.type = type;
          this.pos = new Vector(x, y);
          this.radius = radius;
          this.mass = radius * radius;
          this.vel = new Vector((Math.random() - 0.5) * 60, (Math.random() - 0.5) * 60);
          this.strokeColor = getStrokeColor();
          this.rotation = Math.random() * Math.PI * 2;
          this.rotationSpeed = (Math.random() - 0.5) * 2;
          this.popping = false;
          this.popProgress = 0;
        }

        draw(ctx) {
          ctx.save();
          ctx.translate(this.pos.x, this.pos.y);
          ctx.rotate(this.rotation);
          ctx.strokeStyle = this.strokeColor;
          ctx.lineWidth = 1.5;
          ctx.fillStyle = 'transparent';
          let scale = 1;
          if (this.popping) {
            scale = 1 + this.popProgress * 0.5;
            ctx.globalAlpha = 1 - this.popProgress;
          }
          ctx.scale(scale, scale);
          switch (this.type) {
            case 'circle':
              ctx.beginPath();
              ctx.arc(0, 0, this.radius, 0, Math.PI * 2);
              ctx.stroke();
              break;
            case 'triangle':
              ctx.beginPath();
              for (let i = 0; i < 3; i++) {
                const angle = (i * 2 * Math.PI) / 3 - Math.PI / 2;
                const x = this.radius * Math.cos(angle);
                const y = this.radius * Math.sin(angle);
                if (i === 0) ctx.moveTo(x, y);
                else ctx.lineTo(x, y);
              }
              ctx.closePath();
              ctx.stroke();
              break;
            case 'square':
              ctx.beginPath();
              const size = this.radius * Math.sqrt(2);
              ctx.rect(-size / 2, -size / 2, size, size);
              ctx.stroke();
              break;
          }
          ctx.restore();
        }

        update(delta, width, height) {
          if (this.popping) {
            this.popProgress += delta * 2;
            return this.popProgress < 1;
          }
          this.pos.add(this.vel.clone().mul(delta));
          this.rotation += this.rotationSpeed * delta;
          if (this.pos.x - this.radius < 0 || this.pos.x + this.radius > width)
            this.vel.x *= -1;
          if (this.pos.y - this.radius < 0 || this.pos.y + this.radius > height)
            this.vel.y *= -1;
          this.pos.x = Math.max(this.radius, Math.min(width - this.radius, this.pos.x));
          this.pos.y = Math.max(this.radius, Math.min(height - this.radius, this.pos.y));
          return true;
        }

        isClicked(x, y) {
          const dx = this.pos.x - x;
          const dy = this.pos.y - y;
          return Math.sqrt(dx * dx + dy * dy) < this.radius;
        }

        pop() {
          this.popping = true;
          this.popProgress = 0;
        }
      }

      function resolveCollision(a, b) {
        const normal = b.pos.clone().sub(a.pos);
        const dist = normal.length();
        if (dist === 0) return;
        const minDist = a.radius + b.radius;
        if (dist >= minDist) return;
        const overlap = minDist - dist;
        normal.normalize();
        a.pos.add(normal.clone().mul(-overlap / 2));
        b.pos.add(normal.clone().mul(overlap / 2));
        const relVel = b.vel.clone().sub(a.vel);
        const velAlongNormal = relVel.dot(normal);
        if (velAlongNormal > 0) return;
        const restitution = 1;
        const impulse = (-(1 + restitution) * velAlongNormal) / (1 / a.mass + 1 / b.mass);
        const impulseVec = normal.clone().mul(impulse);
        a.vel.sub(impulseVec.clone().mul(1 / a.mass));
        b.vel.add(impulseVec.clone().mul(1 / b.mass));
      }

      function createShapes(width, height) {
        shapes = [];
        for (let i = 0; i < shapeCount; i++) {
          const type = SHAPE_TYPES[Math.floor(Math.random() * SHAPE_TYPES.length)];
          const radius = 10 + Math.random() * 15;
          const x = radius + Math.random() * (width - 2 * radius);
          const y = radius + Math.random() * (height - 2 * radius);
          shapes.push(new Shape(type, x, y, radius));
        }
      }

      function resize() {
        dpi = window.devicePixelRatio || 1;
        width = window.innerWidth;
        height = window.innerHeight;
        canvas.width = width * dpi;
        canvas.height = height * dpi;
        canvas.style.width = width + "px";
        canvas.style.height = height + "px";
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.scale(dpi, dpi);
      }

      function animate(time = 0) {
        const delta = 1 / 60;
        ctx.clearRect(0, 0, width, height);

        shapes = shapes.filter(shape => {
          if (shape.popping) {
            const alive = shape.update(delta, width, height);
            if (!alive) {
              // Spawn a new shape after pop finishes
              const type = SHAPE_TYPES[Math.floor(Math.random() * SHAPE_TYPES.length)];
              const radius = 10 + Math.random() * 15;
              const x = radius + Math.random() * (width - 2 * radius);
              const y = radius + Math.random() * (height - 2 * radius);
              shapes.push(new Shape(type, x, y, radius));
              return false;
            }
            return true;
          }
          shape.update(delta, width, height);
          return true;
        });

        for (let i = 0; i < shapes.length; i++)
          for (let j = i + 1; j < shapes.length; j++)
            resolveCollision(shapes[i], shapes[j]);

        for (const shape of shapes) shape.draw(ctx);

        requestAnimationFrame(animate);
      }

      window.addEventListener("resize", () => {
        resize();
        createShapes(width, height);
      });

      canvas.addEventListener("click", (e) => {
        const rect = canvas.getBoundingClientRect();
        const x = (e.clientX - rect.left);
        const y = (e.clientY - rect.top);
        for (const shape of shapes) {
          if (!shape.popping && shape.isClicked(x, y)) {
            shape.pop();
            break;
          }
        }
      });

      window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", () => {
        const color = getStrokeColor();
        for (const shape of shapes) {
          shape.strokeColor = color;
        }
      });

      resize();
      createShapes(window.innerWidth, window.innerHeight);
      animate();
    })();
  </script>
</body>
</html>
